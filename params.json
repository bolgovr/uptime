{"name":"Uptime","body":"uptime\r\n======\r\n\r\nA simple remote monitoring utility using Node.js and MongoDB.\r\n\r\n<img src=\"https://github.com/downloads/fzaninotto/uptime/uptime.png\" title=\"Uptime screenshot\" />\r\n\r\nYou can watch a [demo screencast on Vimeo](https://vimeo.com/39302164).\r\n\r\nFeatures\r\n--------\r\n\r\n* Monitor thousands of websites (powered by [Node.js asynchronous programming](http://dotheweb.posterous.com/nodejs-for-php-programmers-1-event-driven-pro))\r\n* Tweak frequency of monitoring on a per-check basis, up to the millisecond\r\n* Receive instant web alerts on every page when a check goes down (thanks [socket.io](http://socket.io/))\r\n* Record availability statistics for further reporting (powered by [MongoDB](http://www.mongodb.org/))\r\n* Detailed uptime reports with animated charts (powered by [Highcharts](http://www.highcharts.com/))\r\n* Monitor availability, responsiveness, average response time , and total uptime/downtime\r\n* Get details about failed checks (HTTP error code, etc.)\r\n* Group checks by tags and get reports by tag\r\n* Familiar web interface (powered by [Twitter Bootstrap 2.0](http://twitter.github.com/bootstrap/index.html))\r\n* complete API for integration with third-party monitoring services\r\n* Easy installation and zero administration\r\n\r\nInstalling Uptime\r\n-----------------------\r\n\r\nAs for every Node.js application, the installation is straightforward:\r\n\r\n    > git clone git://github.com/fzaninotto/uptime.git\r\n    > npm install\r\n    > node app.js\r\n\r\nAdding Checks\r\n-------------\r\n\r\nBy default, the web UI runs on port 8082, so just browse to \r\n\r\n    http://localhost:8082/\r\n\r\nAnd you're ready to begin. Create your first check by entering an URL, wait for the first ping, and you'll soon see data flowing through your charts!\r\n\r\nConfiguring\r\n-----------\r\n\r\nUptime uses [node-config](https://github.com/lorenwest/node-config) to allow YAML configuration and environment support. Here is the default configuration, taken from `config/default.yaml`:\r\n\r\n    mongodb:\r\n      server:   localhost\r\n      database: uptime\r\n      user:     root \r\n      password:\r\n    \r\n    monitor:\r\n      name:                   origin\r\n      apiUrl:                 'http://localhost:8082/api'\r\n      pollingInterval:        10000      # ten seconds\r\n      updateInterval:         60000      # one minute\r\n      qosAggregationInterval: 600000     # ten minutes\r\n      timeout:                5000       # five seconds\r\n      pingHistory:            8035200000 # three months  \r\n    \r\n    autoStartMonitor: true\r\n    \r\n    server:\r\n      port:     8082\r\n\r\nTo modify this configuration, create a `development.yaml` or a `production.yaml` file in the same directory, and override just the settings you need. For instance, to run Uptime on port 80 in production, create a `production.yaml` file as follows:\r\n\r\n    server:\r\n      port:     80\r\n\r\nNode that Uptime works great behind a proxy - it uses the http_proxy environment variable transparently.\r\n\r\nRunning The Monitor In a Separate Process\r\n-----------------------------------------\r\n\r\nHeavily browsing the web dashboard may slow down the server - including the polling monitor. In other terms, using the application can influence the uptime measurements. To avoid this effect, it is recommended to run the polling monitor in a separate process.\r\n\r\nTo that extent, set the `autoStartMonitor` setting to `false` in the `production.yaml`, and launch the monitor by hand:\r\n\r\n    > node monitor.js &\r\n    > node app.js\r\n\r\nYou can also run the monitor in a different server. This second server must be able to reach the API of the dashboard server: set the `monitor.apiUrl` setting accordingly in the `production.yaml` file of the monitor server.\r\n\r\nYou can even run several monitor servers in several datacenters to get average response time. In that case, make sure you set a different `monitor.name` setting for all monitor servers to be able to tell which server make a particular ping.\r\n\r\nUsing Plugins\r\n-------------\r\n\r\nUptime provides plugins that you can enable to add more functionality.\r\n\r\nTo enable plugins, create a `plugins/index.js` module. This module must offer a public `init()` method, where you will require and initialize plugin modules. For instance, to enable only the `console` plugin:\r\n\r\n    // in plugins/index.js\r\n    exports.init = function() {\r\n      require('./console').init();\r\n    }\r\n\r\nCurrently supported plugins:\r\n\r\n * `console`: log pings and events in the console in real time\r\n\r\nYou can add your own plugins under the `plugins` directory. A plugin is simply a module with a public `init()` method. For instance, if you had to recreate a simple version of the `console` plugin, you could write it as follows:\r\n\r\n    // in plugins/console/index.js\r\n    var CheckEvent = require('../../models/checkEvent');\r\n    exports.init = function() {\r\n      CheckEvent.on('postInsert', function(checkEvent) {\r\n        checkEvent.findCheck(function(err, check) {\r\n          console.log(new Date() + check.name + checkEvent.isGoDown ? ' goes down' : ' goes back up');\r\n        });\r\n      });\r\n    }\r\n\r\nAll Uptime entities emit lifecycle events that you can listen to on the Model class. These events are `preInsert`, `postInsert`, `preUpdate`, `postUpdate`, `preSave` (called for both inserts and updates), `postSave` (called for both inserts and updates), `preRemove`, and `postRemove`.\r\n\r\nLicense\r\n-------\r\n\r\nThe Uptime code is free to use and distribute, under the [MIT license](https://raw.github.com/fzaninotto/uptime/master/LICENSE).\r\n\r\nUptime uses third-party libraries:\r\n\r\n* [NodeJS](http://nodejs.org/), licensed under the [MIT License](https://github.com/joyent/node/blob/master/LICENSE#L5-22),\r\n* [Socket.io](http://socket.io/), licensed under the [MIT License](https://github.com/LearnBoost/socket.io/blob/master/Readme.md),\r\n* [MongooseJS](http://mongoosejs.com/), licensed under the [MIT License](https://github.com/LearnBoost/mongoose/blob/master/README.md),\r\n* [jQuery](http://jquery.com/), licensed under the [MIT License](http://jquery.org/license),\r\n* [TwitterBootstrap](http://twitter.github.com/bootstrap/), licensed under the [Apache License v2.0](http://www.apache.org/licenses/LICENSE-2.0),\r\n* [Highcharts.js](http://shop.highsoft.com/highcharts.html), free for non-commercial use under the [Creative Commons Attribution-NonCommercial 3.0 License](http://creativecommons.org/licenses/by-nc/3.0/).\r\n\r\nIf you like the software, please help improving it by contributing PRs on the [GitHub project](https://github.com/fzaninotto/uptime)!\r\n\r\nTODO\r\n----\r\n\r\n* Allow email alerts in case of non-availability (not sure if this should be part of the lib)\r\n* Account for scheduled maintenance (and provide two QoS calculations: with and without scheduled maintenance)\r\n* Allow for JavaScript execution in the monitored resources by using a headless browser (probably zombie.js)\r\n* Unit tests","tagline":"A simple HTTP remote monitoring utility using Node.js and MongoDB.","google":"UA–30862276–1","note":"Don't delete this file! It's used internally to help with page regeneration."}